using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using FindAssocExe;

namespace Graico
{
    public partial class Form1 : Form
    {
        private AsyncGraphicRead AsyncGraphReader = new AsyncGraphicRead();
        private List<string> FileList = null;
        private string nowFile;
        private bool zipFile;
        private Form2 ProgressForm = new Form2();

        public Form1()
        {
            InitializeComponent();
        }

        private async void Form1_Load(object sender, EventArgs e)
        {
            var cmdLine = System.Environment.GetCommandLineArgs();
            string exeName = cmdLine[0].ToLower();
            if (exeName.EndsWith("graico.exe") || exeName.EndsWith("graico.vshost.exe")) {
                if (cmdLine.Count() > 1)
                {
                    string cmdFile = cmdLine[1];
                    if (File.Exists(cmdFile))
                    {
                        await OpenGrapicFile(cmdFile);
                        if (FileList.Count <= 0)
                        {
                            // 既定の方法で開く
                            var proc = System.Diagnostics.Process.Start(cmdFile);
                            var procName = Path.GetFileName(Path.GetExtension(cmdFile).FindAssociatedExecutable()).ToLower();
                            var myProcName = Path.GetFileName(System.Environment.GetCommandLineArgs()[0]).ToLower();
                            if (procName == myProcName)
                            {
                                proc.Kill();
                            }
                            Close();
                            return;
                        }
                        else if (cmdFile.Count() > 2)
                        {
                            string cmdNo = cmdLine[2];
                            int jumpNo = Convert.ToInt32(cmdNo);
                            await SetJumpImage(jumpNo);
                        }
                        else
                        {
                            await SetJumpImage(1);
                        }
                    }
                    else
                    {
                        MessageBox.Show("ファイルが存在しません! File:" + cmdFile);
                        //Close();
                    }
                }
            }
        }

        private async Task OpenGrapicFile(string file)
        {
            if (ProgressForm.IsDisposed)
            {
                ProgressForm = new Form2();
            }
            ProgressForm.Show();

            // 指定されたファイルを元にZIPアーカイブ内／フォルダ内ファイル一覧を取得
            FileList = await AsyncGraphReader.GetFileListAsync(file);
            Debug.WriteLine("File List Count=" + FileList.Count);
            string ext = Path.GetExtension(file).ToLower();
            if (ext == ".zip")
            {
                zipFile = true;
                nowFile = FileList[0];
            }
            else
            {
                zipFile = false;
                nowFile = file;
            }
            //await GetNextImage(0);
            ProgressForm.Close();
        }

        /// <summary>
        /// 次の画像読み込みと関連する処理の実施
        /// </summary>
        /// <param name="add">移動量</param>
        /// <returns>戻り値なし(待機可能にするための指定->voidにすると待機なしになる)</returns>
        private async Task GetNextImage(int add)
        {
            try
            {
                if (ProgressForm.IsDisposed)
                {
                    ProgressForm = new Form2();
                }
                ProgressForm.Show();
                if (pictureBox1.Image != null)
                {
                    pictureBox1.Image.Dispose();
                    pictureBox1.Image = null;
                }
                var newImg = await AsyncGraphReader.GetNextImage(FileList, nowFile, add, zipFile);
                if (newImg != null)
                {
                    pictureBox1.Image = newImg;
                    pictureBox1.Size = new Size(pictureBox1.Image.Width, pictureBox1.Image.Height);
                    nowFile = AsyncGraphReader.FileName;
                    int index = FileList.FindIndex(file => file == nowFile) + 1;
                    Text = nowFile + " (" + index + "/" + FileList.Count + ")";
                }
                ProgressForm.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private async void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var openFile = new OpenFileDialog();
            openFile.Filter = "Graphic Files|*.jpg;*.jpeg;*.bmp;*.gif;*.png;*.zip";
            if (openFile.ShowDialog() == DialogResult.OK)
            {
                string file = openFile.FileName;
                await OpenGrapicFile(file);
                if (FileList.Count <= 0)
                {
                    MessageBox.Show("画像ファイルが存在しません! File:" + file);
                }
            }
        }

        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        private async void Form1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyCode == Keys.Right || e.KeyCode == Keys.Enter)
            {
                await GetNextImage(1);
                //await GetKeyinNextImage(1);
            }
            else if (e.KeyCode == Keys.Left || e.KeyCode == Keys.Back)
            {
                await GetNextImage(-1);
                //await GetKeyinNextImage(-1);
            }
        }

        private async Task GetKeyinNextImage(int add)
        {
            await AsyncClassProgress(new Progress<Image>(img =>
                {
                    if (pictureBox1.Image != null)
                    {
                        pictureBox1.Image.Dispose();
                        pictureBox1.Image = null;
                    }
                    pictureBox1.Image = img;
                    int index = FileList.FindIndex(file => file == nowFile) + add;
                    Text = nowFile + "(" + index + "/" + FileList.Count + ")";
                }
            ));
        }

        private async Task ProgressLoad(IProgress<Image> progress)
        {
            var img = await AsyncGraphReader.GetNextImage(FileList, nowFile, 1, zipFile);
            nowFile = AsyncGraphReader.FileName;
            progress.Report(img);
            //Thread.Sleep(50);
        }

        private async Task AsyncClassProgress(IProgress<Image> progress)
        {
            await Task.Run(() =>
            {
                for (int j = 0; j < 5; j++)
                {
                    for (int i = 0; i < FileList.Count; i++)
                    {
                        var img = AsyncGraphReader.GetNextImage(FileList, nowFile, 1, zipFile);
                        nowFile = AsyncGraphReader.FileName;
                        progress.Report(img.Result);
                        //Thread.Sleep(50);
                    }
                }
            });
        }

        private async void autoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //await AsyncClassProgress(new Progress<Image>(img =>
            //{
            //    if (pictureBox1.Image != null)
            //    {
            //        pictureBox1.Image.Dispose();
            //        pictureBox1.Image = null;
            //    }
            //    pictureBox1.Image = img;
            //    int index = FileList.FindIndex(file => file == nowFile) + 1;
            //    Text = nowFile + "(" + index + "/" + FileList.Count + ")";
            //}
            //));
            var inum = Enumerable.Range(0, 30);
            await Task.Run(() =>
            {
                foreach (var x in inum)
                {
                    SendKeys.SendWait("{RIGHT}");
                    Thread.Sleep(1000);
                }
            });
        }

        public async Task SetJumpImage(int index)
        {
            var img = await AsyncGraphReader.GetZipGraphicImage(index-1);
            pictureBox1.Image = img;
            pictureBox1.Size = img.Size;
            nowFile = FileList[index-1];
            Text = nowFile + " (" + index + "/" + FileList.Count + ")";
        }

        private async void jumpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = FileList.FindIndex(file => file == nowFile);
            var jumpInputForm = new Form3();
            jumpInputForm.setNumericUpDownMaxValue(FileList.Count);
            jumpInputForm.setNumericUpDownValue(index + 1);
            if (jumpInputForm.ShowDialog() == DialogResult.OK)
            {
                index = jumpInputForm.getNumericUpDownValue();
                await SetJumpImage(index);
            }
        }

        private async void nextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await GetNextImage(1);
        }

        private async void beforeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            await GetNextImage(-1);
        }
            private void Form1_Resize(object sender, EventArgs e)
        {
            pictureBox1.Size = ClientSize;
        }}
}
